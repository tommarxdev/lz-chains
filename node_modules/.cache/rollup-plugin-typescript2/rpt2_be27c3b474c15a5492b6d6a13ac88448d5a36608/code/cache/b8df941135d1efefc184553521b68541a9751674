{"code":"import { RPCS } from \"../constants\";\r\nimport { getChainKey, getChainListId } from \"./helpers\";\r\nexport function getMnemonic(networkName) {\r\n    if (networkName) {\r\n        const mnemonic = process.env[\"MNEMONIC_\" + networkName.toUpperCase()];\r\n        if (mnemonic && mnemonic !== \"\") {\r\n            return mnemonic;\r\n        }\r\n    }\r\n    const mnemonic = process.env.MNEMONIC;\r\n    if (!mnemonic || mnemonic === \"\") {\r\n        return \"test test test test test test test test test test test junk\";\r\n    }\r\n    return mnemonic;\r\n}\r\nexport function accounts(chainKey) {\r\n    return { mnemonic: getMnemonic(chainKey) };\r\n}\r\nexport function setupNetwork(networkConfig, chainIds) {\r\n    const networks = {};\r\n    for (let chainId of chainIds) {\r\n        const chainKey = getChainKey(chainId);\r\n        if (chainKey === undefined) {\r\n            throw new Error(\"ChainId not setup in core-sdk\");\r\n        }\r\n        const chainListId = getChainListId(chainId);\r\n        networks[chainKey] = {\r\n            ...networkConfig,\r\n            chainId: chainListId,\r\n            accounts: accounts(chainKey),\r\n        };\r\n    }\r\n    return networks;\r\n}\r\nexport function setupNetworks(chainIds) {\r\n    const networks = {};\r\n    for (let [chainId, config] of chainIds) {\r\n        const rpcIndex = config.rpcIndex ? config.rpcIndex : 0;\r\n        const chainKey = getChainKey(chainId);\r\n        if (chainKey === undefined) {\r\n            throw new Error(\"ChainId not setup in core-sdk\");\r\n        }\r\n        const chainListId = getChainListId(chainId);\r\n        const url = RPCS[chainId]?.[rpcIndex];\r\n        if (!url) {\r\n            throw new Error(\"ChainId not setup in core-sdk\");\r\n        }\r\n        networks[chainKey] = {\r\n            chainId: chainListId,\r\n            accounts: accounts(chainKey),\r\n            url,\r\n        };\r\n    }\r\n    return networks;\r\n}\r\n//# sourceMappingURL=hardhatDeploy.js.map","references":["/Users/tom/Desktop/lz-chains-latest/src/enums/index.ts","/Users/tom/Desktop/lz-chains-latest/src/constants/index.ts","/Users/tom/Desktop/lz-chains-latest/src/utils/helpers.ts"],"map":"{\"version\":3,\"file\":\"hardhatDeploy.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/utils/hardhatDeploy.ts\"],\"names\":[],\"mappings\":\"AACA,OAAO,EAAE,IAAI,EAAE,MAAM,cAAc,CAAA;AACnC,OAAO,EAAE,WAAW,EAAE,cAAc,EAAE,MAAM,WAAW,CAAA;AAEvD,MAAM,UAAU,WAAW,CAAC,WAAoB;IAC5C,IAAI,WAAW,EAAE;QACb,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,WAAW,GAAG,WAAW,CAAC,WAAW,EAAE,CAAC,CAAA;QACrE,IAAI,QAAQ,IAAI,QAAQ,KAAK,EAAE,EAAE;YAC7B,OAAO,QAAQ,CAAA;SAClB;KACJ;IAED,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAA;IACrC,IAAI,CAAC,QAAQ,IAAI,QAAQ,KAAK,EAAE,EAAE;QAC9B,OAAO,6DAA6D,CAAA;KACvE;IACD,OAAO,QAAQ,CAAA;AACnB,CAAC;AAED,MAAM,UAAU,QAAQ,CAAC,QAAiB;IACtC,OAAO,EAAE,QAAQ,EAAE,WAAW,CAAC,QAAQ,CAAC,EAAE,CAAA;AAC9C,CAAC;AAOD,MAAM,UAAU,YAAY,CAAC,aAAkB,EAAE,QAAmB;IAChE,MAAM,QAAQ,GAAoB,EAAE,CAAA;IAEpC,KAAK,IAAI,OAAO,IAAI,QAAQ,EAAE;QAC1B,MAAM,QAAQ,GAAG,WAAW,CAAC,OAAO,CAAC,CAAA;QACrC,IAAI,QAAQ,KAAK,SAAS,EAAE;YACxB,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAA;SACnD;QAED,MAAM,WAAW,GAAG,cAAc,CAAC,OAAO,CAAC,CAAA;QAC3C,QAAQ,CAAC,QAAQ,CAAC,GAAG;YACjB,GAAG,aAAa;YAChB,OAAO,EAAE,WAAW;YACpB,QAAQ,EAAE,QAAQ,CAAC,QAAQ,CAAC;SAC/B,CAAA;KACJ;IACD,OAAO,QAAQ,CAAA;AACnB,CAAC;AAED,MAAM,UAAU,aAAa,CAAC,QAA4C;IACtE,MAAM,QAAQ,GAAoB,EAAE,CAAA;IAEpC,KAAK,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,IAAI,QAAQ,EAAE;QACpC,MAAM,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAA;QAEtD,MAAM,QAAQ,GAAG,WAAW,CAAC,OAAO,CAAC,CAAA;QACrC,IAAI,QAAQ,KAAK,SAAS,EAAE;YACxB,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAA;SACnD;QAED,MAAM,WAAW,GAAG,cAAc,CAAC,OAAO,CAAC,CAAA;QAC3C,MAAM,GAAG,GAAG,IAAI,CAAC,OAAO,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAA;QACrC,IAAI,CAAC,GAAG,EAAE;YACN,MAAM,IAAI,KAAK,CAAC,+BAA+B,CAAC,CAAA;SACnD;QAED,QAAQ,CAAC,QAAQ,CAAC,GAAG;YACjB,OAAO,EAAE,WAAW;YACpB,QAAQ,EAAE,QAAQ,CAAC,QAAQ,CAAC;YAC5B,GAAG;SACN,CAAA;KACJ;IACD,OAAO,QAAQ,CAAA;AACnB,CAAC\"}"}
